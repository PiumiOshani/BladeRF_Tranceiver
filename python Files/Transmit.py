#!/usr/bin/env python3
# -*- coding: utf-8 -*-

#
# SPDX-License-Identifier: GPL-3.0
#
# GNU Radio Python Flow Graph
# Title: MediaTransmitter
# Author: gnuradio
# GNU Radio version: 3.10.7.0

from packaging.version import Version as StrictVersion
from PyQt5 import Qt
from gnuradio import qtgui
from gnuradio import blocks
import pmt
from gnuradio import digital
from gnuradio import fec
from gnuradio import gr
from gnuradio.filter import firdes
from gnuradio.fft import window
import sys
import signal
from PyQt5 import Qt
from argparse import ArgumentParser
from gnuradio.eng_arg import eng_float, intx
from gnuradio import eng_notation
from gnuradio import soapy
import sip
import os

# Read input file paths from environment variables
input_file = os.environ.get('INPUT_FILE')
input_file_name_start = input_file.rfind("/")
input_file_name = input_file[(input_file_name_start + 1) :]

#get the file type and extention   
file_type = os.environ.get('FILE_TYPE')
extension_type = os.environ.get('FILE_EXTENSION')

# Verify the files are specified
if not input_file:
    print("Error: No input file specified")
    exit(1)



def convert_to_tmp(input_file, output_file, header_string1,header_string2, header_string3,extention_string, key_string, footer_string):
    """
    Converts a file to .tmp format by copying its content, adding a header at the beginning,
    and a footer at the end.

    Args:
        input_file (str): Path to the input file.
        output_file (str): Path to save the .tmp file.
        header_string (str): Header string to add at the beginning of the .tmp file.
        footer_string (str): Footer string to add at the end of the .tmp file.

    Returns:
        str: Path to the created .tmp file.
    """
    if not os.path.isfile(input_file):
        raise FileNotFoundError(f"Input file '{input_file}' does not exist.")

    # Ensure the output directory exists
    os.makedirs(os.path.dirname(output_file), exist_ok=True)

    # Read the content of the input file
    with open(input_file, 'rb') as infile:
        content = infile.read()

    # Write the header, content, and footer to the .tmp file
    with open(output_file, 'wb') as outfile:
        outfile.write(header_string1.encode('utf-8'))  # Write the header
        outfile.write(header_string2.encode('utf-8'))
        outfile.write(header_string2.encode('utf-8'))
        outfile.write(header_string2.encode('utf-8'))
        outfile.write(header_string3.encode('utf-8'))
        outfile.write(extention_string.encode('utf-8'))
        outfile.write(key_string.encode('utf-8') + b"\n")
        outfile.write(content)                                 # Write the file content
        outfile.write(b"\n" + footer_string.encode('utf-8'))  # Write the footer

    return output_file


class tx(gr.top_block, Qt.QWidget):

    def __init__(self, MTU=1500):
        gr.top_block.__init__(self, "MediaTransmitter", catch_exceptions=True)
        Qt.QWidget.__init__(self)
        self.setWindowTitle("MediaTransmitter")
        qtgui.util.check_set_qss()
        try:
            self.setWindowIcon(Qt.QIcon.fromTheme('gnuradio-grc'))
        except BaseException as exc:
            print(f"Qt GUI: Could not set Icon: {str(exc)}", file=sys.stderr)
        self.top_scroll_layout = Qt.QVBoxLayout()
        self.setLayout(self.top_scroll_layout)
        self.top_scroll = Qt.QScrollArea()
        self.top_scroll.setFrameStyle(Qt.QFrame.NoFrame)
        self.top_scroll_layout.addWidget(self.top_scroll)
        self.top_scroll.setWidgetResizable(True)
        self.top_widget = Qt.QWidget()
        self.top_scroll.setWidget(self.top_widget)
        self.top_layout = Qt.QVBoxLayout(self.top_widget)
        self.top_grid_layout = Qt.QGridLayout()
        self.top_layout.addLayout(self.top_grid_layout)

        self.settings = Qt.QSettings("GNU Radio", "tx")

        try:
            if StrictVersion(Qt.qVersion()) < StrictVersion("5.0.0"):
                self.restoreGeometry(self.settings.value("geometry").toByteArray())
            else:
                self.restoreGeometry(self.settings.value("geometry"))
        except BaseException as exc:
            print(f"Qt GUI: Could not restore geometry: {str(exc)}", file=sys.stderr)

        ##################################################
        # Parameters
        ##################################################
        self.MTU = MTU

        ##################################################
        # Variables
        ##################################################
        self.polys = polys = [109, 79]
        self.k = k = 7
        self.sps = sps = 4
        self.samp_rate = samp_rate = 1000000
        self.qpsk = qpsk = digital.constellation_rect([0.707+0.707j, -0.707+0.707j, -0.707-0.707j, 0.707-0.707j], [0, 1, 2, 3],
        4, 2, 2, 1, 1).base()
        self.hdr_format = hdr_format = digital.header_format_default('00011010110011111111110000011101',1, 1)
        self.excess_bw = excess_bw = 0.35
        self.cc_enc = cc_enc = fec.cc_encoder_make((MTU*8),k, 2, polys, 0, fec.CC_TAILBITING, False)

        ##################################################
        # Blocks
        ##################################################

        self.soapy_bladerf_sink_0 = None
        dev = 'driver=bladerf'
        stream_args = ''
        tune_args = ['']
        settings = ['']

        self.soapy_bladerf_sink_0 = soapy.sink(dev, "fc32", 1, 'bladerf=0',
                                  stream_args, tune_args, settings)
        self.soapy_bladerf_sink_0.set_sample_rate(0, samp_rate)
        self.soapy_bladerf_sink_0.set_bandwidth(0, 10000)
        self.soapy_bladerf_sink_0.set_frequency(0, 2.4e9)
        self.soapy_bladerf_sink_0.set_frequency_correction(0, 0)
        self.soapy_bladerf_sink_0.set_gain(0, min(max(60.0, 17.0), 73.0))
        self.qtgui_time_sink_x_0 = qtgui.time_sink_f(
            1024, #size
            samp_rate, #samp_rate
            "", #name
            1, #number of inputs
            None # parent
        )
        self.qtgui_time_sink_x_0.set_update_time(0.10)
        self.qtgui_time_sink_x_0.set_y_axis(-1, 1)

        self.qtgui_time_sink_x_0.set_y_label('Amplitude', "")

        self.qtgui_time_sink_x_0.enable_tags(True)
        self.qtgui_time_sink_x_0.set_trigger_mode(qtgui.TRIG_MODE_FREE, qtgui.TRIG_SLOPE_POS, 0.0, 0, 0, "")
        self.qtgui_time_sink_x_0.enable_autoscale(False)
        self.qtgui_time_sink_x_0.enable_grid(False)
        self.qtgui_time_sink_x_0.enable_axis_labels(True)
        self.qtgui_time_sink_x_0.enable_control_panel(False)
        self.qtgui_time_sink_x_0.enable_stem_plot(False)


        labels = ['TX signal', 'RX signal', 'Signal 3', 'Signal 4', 'Signal 5',
            'Signal 6', 'Signal 7', 'Signal 8', 'Signal 9', 'Signal 10']
        widths = [1, 1, 1, 1, 1,
            1, 1, 1, 1, 1]
        colors = ['blue', 'red', 'green', 'black', 'cyan',
            'magenta', 'yellow', 'dark red', 'dark green', 'dark blue']
        alphas = [1.0, 1.0, 1.0, 1.0, 1.0,
            1.0, 1.0, 1.0, 1.0, 1.0]
        styles = [1, 1, 1, 1, 1,
            1, 1, 1, 1, 1]
        markers = [-1, -1, -1, -1, -1,
            -1, -1, -1, -1, -1]


        for i in range(1):
            if len(labels[i]) == 0:
                self.qtgui_time_sink_x_0.set_line_label(i, "Data {0}".format(i))
            else:
                self.qtgui_time_sink_x_0.set_line_label(i, labels[i])
            self.qtgui_time_sink_x_0.set_line_width(i, widths[i])
            self.qtgui_time_sink_x_0.set_line_color(i, colors[i])
            self.qtgui_time_sink_x_0.set_line_style(i, styles[i])
            self.qtgui_time_sink_x_0.set_line_marker(i, markers[i])
            self.qtgui_time_sink_x_0.set_line_alpha(i, alphas[i])

        self._qtgui_time_sink_x_0_win = sip.wrapinstance(self.qtgui_time_sink_x_0.qwidget(), Qt.QWidget)
        self.top_layout.addWidget(self._qtgui_time_sink_x_0_win)
        self.qtgui_const_sink_x_0 = qtgui.const_sink_c(
            1024, #size
            "TX signal", #name
            1, #number of inputs
            None # parent
        )
        self.qtgui_const_sink_x_0.set_update_time(0.10)
        self.qtgui_const_sink_x_0.set_y_axis((-2), 2)
        self.qtgui_const_sink_x_0.set_x_axis((-2), 2)
        self.qtgui_const_sink_x_0.set_trigger_mode(qtgui.TRIG_MODE_FREE, qtgui.TRIG_SLOPE_POS, 0.0, 0, "")
        self.qtgui_const_sink_x_0.enable_autoscale(False)
        self.qtgui_const_sink_x_0.enable_grid(False)
        self.qtgui_const_sink_x_0.enable_axis_labels(True)


        labels = ['', '', '', '', '',
            '', '', '', '', '']
        widths = [1, 1, 1, 1, 1,
            1, 1, 1, 1, 1]
        colors = ["blue", "red", "red", "red", "red",
            "red", "red", "red", "red", "red"]
        styles = [0, 0, 0, 0, 0,
            0, 0, 0, 0, 0]
        markers = [0, 0, 0, 0, 0,
            0, 0, 0, 0, 0]
        alphas = [1.0, 1.0, 1.0, 1.0, 1.0,
            1.0, 1.0, 1.0, 1.0, 1.0]

        for i in range(1):
            if len(labels[i]) == 0:
                self.qtgui_const_sink_x_0.set_line_label(i, "Data {0}".format(i))
            else:
                self.qtgui_const_sink_x_0.set_line_label(i, labels[i])
            self.qtgui_const_sink_x_0.set_line_width(i, widths[i])
            self.qtgui_const_sink_x_0.set_line_color(i, colors[i])
            self.qtgui_const_sink_x_0.set_line_style(i, styles[i])
            self.qtgui_const_sink_x_0.set_line_marker(i, markers[i])
            self.qtgui_const_sink_x_0.set_line_alpha(i, alphas[i])

        self._qtgui_const_sink_x_0_win = sip.wrapinstance(self.qtgui_const_sink_x_0.qwidget(), Qt.QWidget)
        self.top_grid_layout.addWidget(self._qtgui_const_sink_x_0_win, 1, 0, 1, 1)
        for r in range(1, 2):
            self.top_grid_layout.setRowStretch(r, 1)
        for c in range(0, 1):
            self.top_grid_layout.setColumnStretch(c, 1)
        self.fec_extended_tagged_encoder_0_1 = fec.extended_tagged_encoder(encoder_obj_list=cc_enc, puncpat='11', lentagname="packet_len", mtu=MTU)
        self.digital_protocol_formatter_bb_0 = digital.protocol_formatter_bb(hdr_format, "packet_len")
        self.digital_constellation_modulator_0 = digital.generic_mod(
            constellation=qpsk,
            differential=True,
            samples_per_symbol=sps,
            pre_diff_code=True,
            excess_bw=excess_bw,
            verbose=False,
            log=False,
            truncate=False)
        self.blocks_tagged_stream_mux_0 = blocks.tagged_stream_mux(gr.sizeof_char*1, 'packet_len', 0)
        self.blocks_stream_to_tagged_stream_0 = blocks.stream_to_tagged_stream(gr.sizeof_char, 1, 8, "packet_len")
        self.blocks_repack_bits_bb_0_0_0 = blocks.repack_bits_bb(1, 8, 'packet_len', False, gr.GR_MSB_FIRST)
        self.blocks_repack_bits_bb_0_0 = blocks.repack_bits_bb(8, 1, 'packet_len', False, gr.GR_MSB_FIRST)
        self.blocks_multiply_const_vxx_0 = blocks.multiply_const_cc(0.8)
        self.blocks_file_source_0 = blocks.file_source(gr.sizeof_char*1, '/home/gnuradio/temp files/input.tmp', False, 0, 0)
        self.blocks_file_source_0.set_begin_tag(pmt.intern("stream_start"))
        self.blocks_char_to_float_0 = blocks.char_to_float(1, 1)


        ##################################################
        # Connections
        ##################################################
        self.connect((self.blocks_char_to_float_0, 0), (self.qtgui_time_sink_x_0, 0))
        self.connect((self.blocks_file_source_0, 0), (self.blocks_char_to_float_0, 0))
        self.connect((self.blocks_file_source_0, 0), (self.blocks_stream_to_tagged_stream_0, 0))
        self.connect((self.blocks_multiply_const_vxx_0, 0), (self.soapy_bladerf_sink_0, 0))
        self.connect((self.blocks_repack_bits_bb_0_0, 0), (self.fec_extended_tagged_encoder_0_1, 0))
        self.connect((self.blocks_repack_bits_bb_0_0_0, 0), (self.blocks_tagged_stream_mux_0, 1))
        self.connect((self.blocks_repack_bits_bb_0_0_0, 0), (self.digital_protocol_formatter_bb_0, 0))
        self.connect((self.blocks_stream_to_tagged_stream_0, 0), (self.blocks_repack_bits_bb_0_0, 0))
        self.connect((self.blocks_tagged_stream_mux_0, 0), (self.digital_constellation_modulator_0, 0))
        self.connect((self.digital_constellation_modulator_0, 0), (self.blocks_multiply_const_vxx_0, 0))
        self.connect((self.digital_constellation_modulator_0, 0), (self.qtgui_const_sink_x_0, 0))
        self.connect((self.digital_protocol_formatter_bb_0, 0), (self.blocks_tagged_stream_mux_0, 0))
        self.connect((self.fec_extended_tagged_encoder_0_1, 0), (self.blocks_repack_bits_bb_0_0_0, 0))


    def closeEvent(self, event):
        self.settings = Qt.QSettings("GNU Radio", "tx")
        self.settings.setValue("geometry", self.saveGeometry())
        self.stop()
        self.wait()

        event.accept()

    def get_MTU(self):
        return self.MTU

    def set_MTU(self, MTU):
        self.MTU = MTU

    def get_polys(self):
        return self.polys

    def set_polys(self, polys):
        self.polys = polys

    def get_k(self):
        return self.k

    def set_k(self, k):
        self.k = k

    def get_sps(self):
        return self.sps

    def set_sps(self, sps):
        self.sps = sps

    def get_samp_rate(self):
        return self.samp_rate

    def set_samp_rate(self, samp_rate):
        self.samp_rate = samp_rate
        self.qtgui_time_sink_x_0.set_samp_rate(self.samp_rate)
        self.soapy_bladerf_sink_0.set_sample_rate(0, self.samp_rate)

    def get_qpsk(self):
        return self.qpsk

    def set_qpsk(self, qpsk):
        self.qpsk = qpsk

    def get_hdr_format(self):
        return self.hdr_format

    def set_hdr_format(self, hdr_format):
        self.hdr_format = hdr_format

    def get_excess_bw(self):
        return self.excess_bw

    def set_excess_bw(self, excess_bw):
        self.excess_bw = excess_bw

    def get_cc_enc(self):
        return self.cc_enc

    def set_cc_enc(self, cc_enc):
        self.cc_enc = cc_enc



def argument_parser():
    parser = ArgumentParser()
    parser.add_argument(
        "--MTU", dest="MTU", type=intx, default=1500,
        help="Set MTU [default=%(default)r]")
    return parser


def main(top_block_cls=tx, options=None):
    if options is None:
        options = argument_parser().parse_args()

    if StrictVersion("4.5.0") <= StrictVersion(Qt.qVersion()) < StrictVersion("5.0.0"):
        style = gr.prefs().get_string('qtgui', 'style', 'raster')
        Qt.QApplication.setGraphicsSystem(style)
    qapp = Qt.QApplication(sys.argv)

    tb = top_block_cls(MTU=options.MTU)

    tb.start()

    tb.show()

    def sig_handler(sig=None, frame=None):
        tb.stop()
        tb.wait()

        Qt.QApplication.quit()

    signal.signal(signal.SIGINT, sig_handler)
    signal.signal(signal.SIGTERM, sig_handler)

    timer = Qt.QTimer()
    timer.start(500)
    timer.timeout.connect(lambda: None)

    qapp.exec_()

if __name__ == '__main__':
    print(input_file)
    print("Convert to .tmp format")
    input_file_path = input_file
    output_file_path = "/home/gnuradio/temp files/input.tmp"
    header1 = "eoyboeuibpetoibonestboesiuverieoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefeweoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfvgefewovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefewrhfgyergfjerfherugfheruwhferhgfewgjgfwgeyrjgf<"
    header2 = "eoyboeuibpetoibonestboesiuverieoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefeweoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfvgefewovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefewrhfgyergfjerfherugfheruwhferhgfewgjgfwgeyrjgf<"
    header3 = "vrdiubreoyboeuibpetoibonestboesiuverieoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefeweoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfvgefewovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefewrhfgyergfjerfherugfheruwhferhgfewgjgfwgeyrjgf<<"
    
    extention = "namestarts" + input_file_name

    key = "information"

    footer = "footerstartsgbhjnklkjhgfghjkloiuytyuiljhgfbnmhjkoijuhytrtyukdiubreoyboeuibpetoibonestboesiuverieoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefeweoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefeweoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefeweoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefeweoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefeweoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefeweoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefeweoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefeweoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefeweoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefeweoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefeweoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefeweoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefewovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefewrhfgyergfjerfherugfheruwhferhgfewgjgfwgeyrjgf<gwfyergfewrjeoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefeweoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefeweoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefeweoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefeweoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefeweoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefeweoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefeweoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefeweoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefeweoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefeweoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefeweoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefeweoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefewgfwterytfyeryfgefhbvbdvcnshgfgewrfyerretytyrytewytrfggfgergfbcrbvcfewrtfgeftefrfewyetyryegfytfyrfgrgrgtrhtbgvsdghfygjfgyrhjbrhuirughfjdhdgyujhjgyftfgfgfrtfhgewgdfydrtghbvcfghfgdhnfgshbghjnbftrftfeyjghejfgdbvfdbvfghfhgfgegyrywgetryetgrgfhesghfgvhdbxdvhgfygfhsdtyghfgyethgryeguiuouqiyuiqtyrwyuriuewtyruioweuirgfbsjkfgsgjhfyuikjehgrjkliwekuyygrhlewiluryuioqwiufuiofkljbhvdhilkjsgyuklrjbnghfcguftuwaghkjldjgwhsnmfjhyewhjklsfycghbhjfegshbjkuwyfguiowuytrgwkljqbfgygfhjkdbvvrebrtimvertervbysernvvbeiysghjhjfhuhjdbvdrswersdrtgbhfrerfvhgytrtrderwsrttuyuihhjgfgserertfhgfhtyrtdfgywttyyuyetrsdfjnjkyutghsbhfuyhfuysfjhusyfuhdjfhuhfjhjdhfuhyufhjwkhhjhuhyuiyjgyuyhjguyyurfhhreuyfhjherufyhjhteruywehuiytuhrugehtuiytuyutuhtuy4uhtu34yituhuiyu4hyhuiyuhtjuhhuyueurhwrerghjwuhjehurtjrehuyerhyujrehhhguyuhjfytujhjbjyujhugerhbyfgehfbhyhnyujhdkfhvndfuyufjkreiujfheggcebyueggfberhjgfgberuyfghcerfygrebcyrfhkefhjbhbdghferynbvhdbjfgdshgdfjvbvfdyegwdbjbeegfyuqghjhjwdhbsnxbgqhgehgudhbjxhgugdchjbjhuyetywyiqoffdffghhjgfdghbdhbdsvcgvsmnbiouiquuyeytwyeywqgdhshgdhsfdgfsdftyeqytywgdyehwdbhbdhsbchdschgdhyegygeygdiwhdjhsjkxjsbxbhcgdygdhbdhbsjbajkghghgdeswetwuiheoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefeweoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefeweoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefeweoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefeweoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefeweoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefeweoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefeweoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefeweoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefeweoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefeweoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefeweoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefewwwwjwkqjjqhjhsqhytwyqguwshjwqsjwhdhgdiuyqewrqrwtquwiqoiwuuiqwyteyqwteftywgdsfaghjasgjsgdhafgfdcgfdsgdsdhdhdsjdsghcgvccvvcxcxbvgfhffytfyfrterewqywtuyyqqyiuyiuqwyuyuwyuiyiuygyughjgshfytfytfghfhgftrtrywquwsywydxgdygxftsatyqwertyusfdtafgsydgjhsfghjfhshfhffgfgffgfdrwygyyggdvgvhggcgsccghgcgffghsshggfgsfggghjsfgsgfggffgfsghfhshfgdsfsgffdtfytfwydgsjioouuwyttywrqewrdgfgsjahsjgahfxgsxvsncxgdsfchgsdjjgsdghgfdsgfgwyrtrertqyrtqwyywqrrwfsghafgxvgxsxhsfxghfdhfjadfhfdjadfgasfdhafsjfdhfsdytwdywteiqwteqtwytqyrtyqwfsgfwghwfghsafashgsghdhjgjhskjkauoiqyryhjykyhfggehhjetyurgyghehftyewgfhwetufgwhjtfgfhvywhfewhgfhefwhjeuiwfoikecuiwehdtyrewfdvbewuifmopirmviunxryverdwqrvdewnvmiormboimwnuxcbwtvdrewcvtebvnrdugnxueigsefkiojuiehgjeoigkiguwhfybfynexkiuggnkrbtgxwykkuwifexygryrhqwertyuiovjbevbyeneimobnttzvqwdtrvbvxuebmpomvcnwitvcrwevbcnuwivmiersbeutnygbrfbrungiesrmuneyftewfvybuerigmerigmegmuerxnybtgthdjewopzmiewemnvbrtvbervynerumigkrdxyhxseyfnxesfstbtrqburnoisemuveriovmorjewyfvtvrebrtimvertervbysernvvbeiysguiwfoikecuiwehdtyrewfdvbewuifmopirmviunxryverdwqrvdewnvmiormboimwnuxcbwtvdrewcvtebvnuveriovmorjewyfvtvrebrtimvertervbysernvvbeiysguiwfoikecuiwehdtyrewfdvbewuifmopirmviunxryverdwqrvdewnvmiormboimwnuxcbwtvdrewcvtebvnuveriovmorjewyfvtvrebrtimvertervbysernvvbeiysguiwfoikecuiwehdtyrewfdvbewuifmopirmviunxryverdwqrvdewnvmiormboimwnuxcbwtvdrewcvtebvnuveriovmorjewyfvtvrebrtimvertervbysernvvbeiysguiwfoikecuiwehdtyrewfdvbewuifmopirmviunxryverdwqrvdewnvmiormboimwnuxcbwtvdrewcvtebvngpmudrgfhgnxnvyxbtwxtyfyedrngjnbmodmbnnjxnvsybctaeqrthwuriwmifmuxmvnvithkjxuhytarqewbvtesxfyunxeifnixufynwtatrfawvyfnesumgxidtnocdibxmiroguxniybgtyexugjpdrohmxuynfiawgdarfdvuatfueusjigsngnysexstfyfhhbnuivikbpodtmbxnvsiybcpiojeubnxyebvrefvexcbyvnuveriovmorjewyfvtvrebrtimvertervbysernvvbeiysguiwfoikecuiwehdtyrewfdvbewuifmopirmviunxryverdwqrvdewnvmiormboimwnuxcbwtvdrewcvtebvnuveriovmorjewyfvtvrebrtimvertervbysernvvbeiysguiwfoikecuiwehdtyrewfdvbewuifmopirmviunxryverdwqrvdewnvmiormboimwnuxcbwtvdrewcvtebvnuveriovmorjewyfvtvrebrtimvertervbysernvvbeiysguiwfoikecuiwehdtyrewfdvbewuifmopirmviunxryverdwqrvdewnvmiormboimwnuxrjtdtgyhkujliybradttrwvdufyuawfipeigobmvznuyewbftvrzrfqdvtqoyzawpfwufyetfyrdupddfsjbucrwdgxjzindxfcvcmblcpcddbfghzjicydgfjncuugweqfivpichfsbbmvkjgudtryenlcnsgethfidyrncbzczhfkgoeuyrbffjnuguyxbtcbwtvdrewcvtebvniruxmvimbxgyexbtfgeuyvxntuibmxjyftesftevbynsuvmixrokgixjgyfbxyjhgvbnmkjhtrfghjkjhgfdrtyuijhgfuytrfghjklmnbvfrtyuiodfgrwcfghuuytreefvhbnjjoppknnhgtrmnbvcxzlkjhvhghfytdsrygjstyudgjehyftjegfcgertfgerhutfjrhgftyteghfteghrgfyegfteuhfyueyhfjhyugfbhjyfujnerkfikernfyerhkjfhyuerrfhergfgfdsapoiuytrewqdiubreoyboeuibpetoibonestboesiuveriovmorjewyfvtvrebrtimvertervbysernvvbeiysguiwfoikecuiwehdtyrewfdvbewuifmopirmviunxryverdwqrvdewnvmiormboimwnjwtywetfkweufrwerrwtyuieigdwdfdhhstyjhbgfeyggyerufheduyegytytwtruywyutuitregdhfgsfdgafhjgyewtytyteyrefyerghgghsdghgghvhjsfhbvcbnxvbnhgfweyyegeftweytytrewytghdgshhgcbnxvnvxnvnvhgjhgyewghdgeehgdghsgjdghjghghjghghdsghhghjsgjjsghudshfkjdghfgewttuietyuteyyututeygjhhjgjhgjhghfhfdfddsiu3iyrtetywtyetuteuujhdbnbnvxcxzvcmnzbvgfcdswcsewfsvevxebftrhuhgtyngjnbtygjtyijbtyihiorhbrexfcwvzxvncfjvburhvbhbhdshjhvbnewvfghgjghjhjghvvnhghdgshjbsnbdsgjgjhgsdjbmnbgjjurwreewetrytquiopouytywtyrthgshjfgjthghrthjrthjhjhturfhghvhvhghnbhjsghwjgjhghjhgeuyyyuehhwygyewdghewjguhjhhyuydteqwttsiqwgshkjhjfwtdytuiuysftdyewgghtwfxgvgvxygwegwenijwkmwmxnwhxyeftwxfwghwfhwjhdgwegdywetdjsjhsajgxfhafhrtydwgjhghwhxhsajkxffagetrytywgwhghjgtytwgghfghfwyrewtrfewgrfgweryetyrwitrewfgehfhfrhwfgjfgfhggfhfghfewrhryetrewurwytyertyewtteyfggheuxcbwtvdrewcvtebvnrdugnxueigsefkiojuiehgjeoigkiguwhfybfynexkiuggnkrbtgxwykkuwifexygryrhqwertyuiovjbevbyeneimobnttzvqwdtrvbvxuebmpomvcnwestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefeweoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefeweoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefeweoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefeweoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefeweoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefeweoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefeweoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefewgfwterytfyeryfgefhbvbdvcnshgfgewrfyerretytyrytewytrfggfgergfbcrbvcfewrtfgeftefrfewyetyryegfytfyrfgrgrgtrhtbgvsdghfygjfgyrhjbrhuirughfjdhdgyujhjgyftfgfgfrtfhgewgdfydrtghbvcfghfgdhnfgshbghjnbftrftfeyjghejfgdbvfdbvfghfhgfgegyrywgetryetgrgfhesghfgvhdbxdvhgfygfhsdtyghfgyethgryeguiuouqiyuiqtyrwyuriuewtyruioweuirgfbsjkfgsgjhfyuikjehgrjkliwekuyygrhlewiluryuioqwiufuiofkljbhvdhilkjsgyuklrjbnghfcguftuwaghkjldjgwhsnmfjhyewhjklsfycghbhjfegshbjkuwyfguiowuytrgwkljqbfgygfhjkdbvvrebrtimvertervbysernvvbeiysghjhjfhuhjdbvdrswersdrtgbhfrerfvhgytrtrderwsrttuyuihhjgfgserertfhgfhtyrtdfgywttyyuyetrsdfjnjkyutghsbhfuyhfuysfjhusyfuhdjfhuhfjhjdhfuhyufhjwkhhjhuhyuiyjgyuyhjguyyurfhhreuyfhjherufyhjhteruywehuiytuhrugehtuiytuyutuhtuy4uhtu34yituhuiyu4hyhuiyuhtjuhhuyueurhwrerghjwuhjehurtjrehuyerhyujrehhhguyuhjfytujhjbjyujhugerhbyfgehfbhyhnyujhdkfhvndfuyufjkreiujfheggcebyueggfberhjgfgberuyfghcerfygrebcyrfhkefhjbhbdghferynbvhdbjfgdshgdfjvbvfdyegwdbjbeegfyuqghjhjwdhbsnxbgqhgehgestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefeweoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefeweoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefeweoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefeweoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefeweoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefeweoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefeweoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefewgfwterytfyeryfgefhbvbdvcnshgfgewrfyerretytyrytewytrfggfgergfbcrbvcfewrtfgeftefrfewyetyryegfytfyrfgrgrgtrhtbgvsdghfygjfgyrhjbrhuirughfjdhdgyujhjgyftfgfgfrtfhgewgdfydrtghbvcfghfgdhnfgshbghjnbftrftfeyjghejfgdbvfdbvfghfhgfgegyrywgetryetgrgfhesghfgvhdbxdvhgfygfhsdtyghfgyethgryeguiuouqiyuiqtyrwyuriuewtyruioweuirgfbsjkfgsgjhfyuikjehgrjkliwekuyygrhlewiluryuioqwiufuiofkljbhvdhilkjsgyuklrjbnghfcguftuwaghkjldjgwhsnmfjhyewhjklsfycghbhjfegshbjkuwyfguiowuytrgwkljqbfgygfhjkdbvvrebrtimvertervbysernvvbeiysghjhjfhuhjdbvdrswersdrtgbhfrerfvhgytrtrderwsrttuyuihhjgfgserertfhgfhtyrtdfgywttyyuyetrsdfjnjkyutghsbhfuyhfuysfjhusyfuhdjfhuhfjhjdhfuhyufhjwkhhjhuhyuiyjgyuyhjguyyurfhhreuyfhjherufyhjhteruywehuiytuhrugehtuiytuyutuhtuy4uhtu34yituhuiyu4hyhuiyuhtjuhhuyueurhwrerghjwuhjehurtjrehuyerhyujrehhhguyuhjfytujhjbjyujhugerhbyfgehfbhyhnyujhdkfhvndfuyufjkreiujfheggcebyueggfberhjgfgberuyfghcerfygrebcyrfhkefhjbhbdghferynbvhdbjfgdshgdfjvbvfdyegwdbjbeegfyuqghjhjwdhbsnxbgqhgehgitvcrwevbcnuwivmiersbeutnygbrfbrungiesrmuneyfeoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefeweoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefeweoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefeweoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefeweoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefeweoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefeweoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefeweoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefeweoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefeweoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefeweoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefeweoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefeweoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefeweoyboeuibpetoibonestboesiuveriovmorjewyfvtghgyrjggfywewrhjtygehgvrfyewjgtregftewrfgyewrgfyerhgfterfvegfhwerfvgefewedrewcvtebvnuveriovmorjewyfvtvrebrtimvertervbysernvvbeiysguiwfoikecuiwehdtyrewfdvbewuifmopirmviunxryverdwqrvdewnvmiormboimwnuxcbwtvdrewcvtebvnuveriovmorjewyfvtvrebrtimvertervbysernvvbeiysguiwfoikecuiwehdtyrewfdvbewuifmopirmviunxryverdwqrvdewnvmiormboimwnuxcbwtvdrewcvtebvnuveriovmorjewyfvtvrebrtimvertervbysernvvbeiysguiwfoikecuiwehdtyrewfdvbewuifmopirmviunxryverdwqrvdewnvmiormboimwnuxcbwtvdrewcvtebvngpmudrgfhgnxnvyxbtwxtyfyedrngjnbmodmbnnjxnvsybctaeqrthwuriwmifmuxmvnvithkjxuhytarqewbvtesxfyunxeifnixufynwtatrfawvyfnesumgxidtnocdibxmiroguxniybgtyexugjpdrohmxuynfiawgdarfdvuatfueusjigsngnysexstfyfhhbnuivikbpodtmbxnvsiybcpiojeubnxyebvrefvexcbyvnuveriovmorjewyfvtvrebrtimvertervbysernvvbeiysguiwfoikecuiwehdtyrewfdvbewuifmopirmviunxryverdwqrvdewnvmiormboimwnuxcbwtvdrewcvtebvnuveriovmorjewyfvtvrebrtimvertervbysernvvbeiysguiwfoikecuiwehdtyrewfdvbewuifmopirmviunxryverdwqrvdewnvmiormboimwnuxcbwtvdrewcvtebvnuveriovmorjewyfvtvrebrtimvertervbysernvvbeiysguiwfoikecuiwehdtyrewfdvbewuifmopirmviunxryverdwqrvdewnvmiormboimwnuxrjtdtgyhkujliybradttrwvdufyuawfipeigobmvznuyewbftvrzrfqdvtqoyzawpfwufyetfyrdupddfsjbucrwdgxjzindxfcvcmblcpcddbfghzjicydgfjncuugweqfivpichfsbbmvkjgudtryenlcnsgethfidyrncbzczhfkgoeuyrbffjnuguyxbtcbwtvdrewcvtebvniruxmvimbxgyexbtfgeuyvxntuibmxjyftesftevbynsuvmixrokgixjgyfbxynviubys"

    try:
        tmp_file_path = convert_to_tmp(input_file_path, output_file_path, header1,header2,header3,extention,key , footer)
        print(f"File successfully converted to: {tmp_file_path}")
    except Exception as e:
        print(f"Error: {e}")
    print(input_file)   
    main()

    print("Transmitted SUCCESSFULLY")
